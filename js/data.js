"use strict";
// class that store the data
class PostsData {
    constructor(id, title, body, imageUrl) {
        this.id = id;
        this.title = title;
        this.body = body;
        this.imageUrl = imageUrl;
    }
}
// set the data
const data = new Array();
data.push({
    id: 1,
    title: "Post 1",
    body: "Body of post 1",
    imageUrl: "https://fotografiamais.com.br/wp-content/uploads/2019/04/fotos-da-natureza-um-genero.jpg"
});
data.push({
    id: 2,
    title: "Post 2",
    body: "Body of post 2",
    imageUrl: "https://img.freepik.com/fotos-gratis/bela-paisagem-de-um-rio-cercado-por-muito-verde-em-uma-floresta_181624-40482.jpg?w=1380&t=st=1680198786~exp=1680199386~hmac=75263a427df2001893bc9d39b43066fa991b5336c38bc525477146a5217b106b"
});
data.push({
    id: 3,
    title: "Post 3",
    body: "Body of post 3",
    imageUrl: "https://img.freepik.com/fotos-gratis/caminho-de-madeira-bonito-indo-as-arvores-coloridas-de-tirar-o-folego-em-uma-floresta_181624-5840.jpg?w=1380&t=st=1680198883~exp=1680199483~hmac=cf55aa1c1c1f8b0659c545d85067eee21750235943d18580146f4364faa29f42"
});
// Adding the data to the HTML
const postCard = (aux) => `
  <div class='post'>
    <button type='button' class='post-btn' id='${aux.id}'>
      <img src='${aux.imageUrl}' alt='${aux.title}' />
      <div>
        <h1>${aux.title}</h1>
        <p>${aux.body}</p>
      </div>
    </button>
  </div>
`;
const postsList = document.getElementById('posts-list');
if (postsList) {
    let postsDataToHTML = '';
    for (const postData of data) {
        postsDataToHTML += postCard(postData);
    }
    postsList.innerHTML = postsDataToHTML;
    const postButtons = document.querySelectorAll('.post-btn');
    postButtons.forEach((button) => {
        button.addEventListener('click', function () {
            console.log(+this.id);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3RzL2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRCQUE0QjtBQUM1QixNQUFNLFNBQVM7SUFNWCxZQUFZLEVBQVMsRUFBRSxLQUFZLEVBQUUsSUFBVyxFQUFFLFFBQWdCO1FBQzlELElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztDQUNKO0FBRUQsZUFBZTtBQUNmLE1BQU0sSUFBSSxHQUFnQixJQUFJLEtBQUssRUFBYSxDQUFDO0FBRWpELElBQUksQ0FBQyxJQUFJLENBQUM7SUFDTixFQUFFLEVBQUcsQ0FBQztJQUNOLEtBQUssRUFBRyxRQUFRO0lBQ2hCLElBQUksRUFBRyxnQkFBZ0I7SUFDdkIsUUFBUSxFQUFHLDBGQUEwRjtDQUN4RyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ04sRUFBRSxFQUFFLENBQUM7SUFDTCxLQUFLLEVBQUUsUUFBUTtJQUNmLElBQUksRUFBRSxnQkFBZ0I7SUFDdEIsUUFBUSxFQUFFLG1PQUFtTztDQUNoUCxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ04sRUFBRSxFQUFFLENBQUM7SUFDTCxLQUFLLEVBQUUsUUFBUTtJQUNmLElBQUksRUFBRSxnQkFBZ0I7SUFDdEIsUUFBUSxFQUFFLHdQQUF3UDtDQUNyUSxDQUFDLENBQUM7QUFFSCw4QkFBOEI7QUFDOUIsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFlLEVBQUUsRUFBRSxDQUFDOztpREFFVyxHQUFHLENBQUMsRUFBRTtrQkFDckMsR0FBRyxDQUFDLFFBQVEsVUFBVSxHQUFHLENBQUMsS0FBSzs7Y0FFbkMsR0FBRyxDQUFDLEtBQUs7YUFDVixHQUFHLENBQUMsSUFBSTs7OztDQUlwQixDQUFDO0FBRUYsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUV4RCxJQUFJLFNBQVMsRUFBRTtJQUNYLElBQUksZUFBZSxHQUFHLEVBQUUsQ0FBQTtJQUV4QixLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksRUFBRTtRQUMzQixlQUFlLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0tBQ3RDO0lBRUQsU0FBUyxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUE7SUFFckMsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNELFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUM3QixNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY2xhc3MgdGhhdCBzdG9yZSB0aGUgZGF0YVxyXG5jbGFzcyBQb3N0c0RhdGEge1xyXG4gICAgaWQ6IG51bWJlcjtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBib2R5OiBzdHJpbmc7XHJcbiAgICBpbWFnZVVybDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlkOm51bWJlciwgdGl0bGU6c3RyaW5nLCBib2R5OnN0cmluZywgaW1hZ2VVcmw6IHN0cmluZyl7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcclxuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xyXG4gICAgICAgIHRoaXMuaW1hZ2VVcmwgPSBpbWFnZVVybDtcclxuICAgIH1cclxufVxyXG5cclxuLy8gc2V0IHRoZSBkYXRhXHJcbmNvbnN0IGRhdGE6IFBvc3RzRGF0YVtdID0gbmV3IEFycmF5PFBvc3RzRGF0YT4oKTtcclxuXHJcbmRhdGEucHVzaCh7XHJcbiAgICBpZCA6IDEsXHJcbiAgICB0aXRsZSA6IFwiUG9zdCAxXCIsXHJcbiAgICBib2R5IDogXCJCb2R5IG9mIHBvc3QgMVwiLFxyXG4gICAgaW1hZ2VVcmwgOiBcImh0dHBzOi8vZm90b2dyYWZpYW1haXMuY29tLmJyL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE5LzA0L2ZvdG9zLWRhLW5hdHVyZXphLXVtLWdlbmVyby5qcGdcIlxyXG59KTtcclxuXHJcbmRhdGEucHVzaCh7XHJcbiAgICBpZDogMixcclxuICAgIHRpdGxlOiBcIlBvc3QgMlwiLFxyXG4gICAgYm9keTogXCJCb2R5IG9mIHBvc3QgMlwiLFxyXG4gICAgaW1hZ2VVcmw6IFwiaHR0cHM6Ly9pbWcuZnJlZXBpay5jb20vZm90b3MtZ3JhdGlzL2JlbGEtcGFpc2FnZW0tZGUtdW0tcmlvLWNlcmNhZG8tcG9yLW11aXRvLXZlcmRlLWVtLXVtYS1mbG9yZXN0YV8xODE2MjQtNDA0ODIuanBnP3c9MTM4MCZ0PXN0PTE2ODAxOTg3ODZ+ZXhwPTE2ODAxOTkzODZ+aG1hYz03NTI2M2E0MjdkZjIwMDE4OTNiYzlkMzliNDMwNjZmYTk5MWI1MzM2YzM4YmM1MjU0NzcxNDZhNTIxN2IxMDZiXCJcclxufSk7XHJcblxyXG5kYXRhLnB1c2goe1xyXG4gICAgaWQ6IDMsXHJcbiAgICB0aXRsZTogXCJQb3N0IDNcIixcclxuICAgIGJvZHk6IFwiQm9keSBvZiBwb3N0IDNcIixcclxuICAgIGltYWdlVXJsOiBcImh0dHBzOi8vaW1nLmZyZWVwaWsuY29tL2ZvdG9zLWdyYXRpcy9jYW1pbmhvLWRlLW1hZGVpcmEtYm9uaXRvLWluZG8tYXMtYXJ2b3Jlcy1jb2xvcmlkYXMtZGUtdGlyYXItby1mb2xlZ28tZW0tdW1hLWZsb3Jlc3RhXzE4MTYyNC01ODQwLmpwZz93PTEzODAmdD1zdD0xNjgwMTk4ODgzfmV4cD0xNjgwMTk5NDgzfmhtYWM9Y2Y1NWFhMWMxYzFmOGIwNjU5YzU0NWQ4NTA2N2VlZTIxNzUwMjM1OTQzZDE4NTgwMTQ2ZjQzNjRmYWEyOWY0MlwiXHJcbn0pO1xyXG5cclxuLy8gQWRkaW5nIHRoZSBkYXRhIHRvIHRoZSBIVE1MXHJcbmNvbnN0IHBvc3RDYXJkID0gKGF1eCA6IFBvc3RzRGF0YSkgPT4gYFxyXG4gIDxkaXYgY2xhc3M9J3Bvc3QnPlxyXG4gICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSdwb3N0LWJ0bicgaWQ9JyR7YXV4LmlkfSc+XHJcbiAgICAgIDxpbWcgc3JjPScke2F1eC5pbWFnZVVybH0nIGFsdD0nJHthdXgudGl0bGV9JyAvPlxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxoMT4ke2F1eC50aXRsZX08L2gxPlxyXG4gICAgICAgIDxwPiR7YXV4LmJvZHl9PC9wPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvYnV0dG9uPlxyXG4gIDwvZGl2PlxyXG5gO1xyXG5cclxuY29uc3QgcG9zdHNMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc3RzLWxpc3QnKTtcclxuXHJcbmlmIChwb3N0c0xpc3QpIHtcclxuICAgIGxldCBwb3N0c0RhdGFUb0hUTUwgPSAnJ1xyXG4gIFxyXG4gICAgZm9yIChjb25zdCBwb3N0RGF0YSBvZiBkYXRhKSB7ICBcclxuICAgICAgcG9zdHNEYXRhVG9IVE1MICs9IHBvc3RDYXJkKHBvc3REYXRhKVxyXG4gICAgfVxyXG4gIFxyXG4gICAgcG9zdHNMaXN0LmlubmVySFRNTCA9IHBvc3RzRGF0YVRvSFRNTFxyXG4gIFxyXG4gICAgY29uc3QgcG9zdEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucG9zdC1idG4nKTtcclxuICAgIHBvc3RCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xyXG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coK3RoaXMuaWQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4iXX0=